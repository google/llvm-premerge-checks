// Copyright 2019 Google LLC
//
// Licensed under the the Apache License v2.0 with LLVM Exceptions (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://llvm.org/LICENSE.txt
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

def success = true
def failure_message = ""

pipeline {
    agent { label 'linux' }
    parameters {
        string(name: 'DIFF_ID')
        string(name: 'PHID')
        string(name: 'REV_ID')
    }
    environment {
            CONDUIT_TOKEN = credentials('phabricator-conduit-token')
            PHABRICATOR_HOST = 'https://reviews.llvm.org'
            LLVM_DIR = "${WORKSPACE}/llvm-project"
            SCRIPT_DIR = "${WORKSPACE}/llvm-premerge-checks/scripts"
            RESULT_DIR = "${WORKSPACE}/results"
            PHAB_LOG = "${RESULT_DIR}/.phabricator-comment"
            MY_BUILD_ID = "${JOB_BASE_NAME}-${BUILD_NUMBER}"
            TARGET_DIR = "/mnt/nfs/results/${MY_BUILD_ID}"
            RESULT_URL = "http://results.llvm-merge-guard.org/${MY_BUILD_ID}"
    }
    options {
        timeout(time:2, unit:'HOURS')
    }
    stages {
        stage("build info"){
            steps {
                echo "Building diff ${DIFF_ID} with PHID ${PHID} for Revision ${REV_ID}"
                script {
                    currentBuild.displayName += " D${REV_ID}"
                    currentBuild.description = "<a href='https://reviews.llvm.org/D${REV_ID}'>D${REV_ID}</a>"
                }
                sh """
                  rm -rf ${RESULT_DIR}
                  mkdir -p ${RESULT_DIR}
                  """
               // Report versions of the installed packages.
               sh """
                  echo Versions of various tools: > ${RESULT_DIR}/package_version.log
                  clang --version >> ${RESULT_DIR}/package_version.log
                  clang-tidy --version >> ${RESULT_DIR}/package_version.log
                  ld.lld --version >> ${RESULT_DIR}/package_version.log
                  dpkg -l >> ${RESULT_DIR}/package_version.log
                  """
            }
        }
        stage("git checkout")
        {
            steps {
                dir("${LLVM_DIR}")
                {
                    git url: 'git@github.com:llvm-premerge-tests/llvm-project.git', branch: "phab-diff-${DIFF_ID}"
                    sh 'git clean -fdx'
                    sh 'git show -s'
                }
                dir("llvm-premerge-checks")
                {
                    git url: 'https://github.com/google/llvm-premerge-checks.git'
                }
            }
        }
        stage('CMake') {
            steps {
                dir("${LLVM_DIR}")
                {
                    script {
                        success = false
                        failure_message = "Failed to run cmake"
                    }
                    sh "${SCRIPT_DIR}/run_cmake.py detect"
                    script {
                        success = true
                        failure_message = ""
                    }
                }
            }
        }
        stage('ninja all') {
            steps {
                dir("${LLVM_DIR}")
                {
                    script {
                        try {
                            sh(script: "${SCRIPT_DIR}/run_ninja.py all")
                        } catch (e) {
                              success = false;
                              failure_message = "'ninja all' failed" // append as build might already be broken
                              echo e.toString()
                        }
                    }
                }
            }
        }
        stage('ninja check-all') {
            steps {
                dir("${LLVM_DIR}")
                {
                    script {
                        try {
                            sh(script: "${SCRIPT_DIR}/run_ninja.py check-all")
                        } catch (e) {
                            success = false;
                            failure_message += "\n'ninja check-all' failed" // append as build might already be broken
                            echo e.toString()
                        }
                    }
                }
            }
        }
        stage('linters') {
            steps {
                dir("${LLVM_DIR}")
                {
                    script {
                        try {
                          sh(script: "${SCRIPT_DIR}/lint.sh HEAD~1 ${RESULT_DIR}")
                        } catch (e) {
                            success = false;
                            failure_message += "\nFailed to run linters" // append as build might already be broken
                            echo e.toString()
                        }
                    }
                }
            }
        }
    }
    post { 
        always {
            script {
                if (success) {
                    currentBuild.result = "SUCCESS"
                } else {
                    currentBuild.result = "FAILURE"
                }
            }
            echo "Console log is available at ${RESULT_URL}"
            dir("${RESULT_DIR}") {
                // copy console log to result folder
                sh "wget -qO console-log.txt http://jenkins-ui.jenkins.svc.cluster.local:8080/job/${JOB_BASE_NAME}/${BUILD_NUMBER}/consoleText"
                // keep a copy of the answer from Phabricator for debugging
                // TODO: move all file copy operations here
                sh """
                    set -eu
                    cp ${LLVM_DIR}/build/CMakeCache.txt . || :
                    cp ${LLVM_DIR}/build/test-results.xml . || :
                    mkdir -p ${TARGET_DIR}
                    cp * ${TARGET_DIR}
                """
            }
            /// send results to Phabricator
            sh """${SCRIPT_DIR}/phabtalk/phabtalk.py "${PHID}" "${DIFF_ID}" \
                --workspace "${WORKSPACE}" \
                --conduit-token "${CONDUIT_TOKEN}" \
                --test-result-file "${RESULT_DIR}/test-results.xml" \
                --host "${PHABRICATOR_HOST}/api/" \
                --buildresult ${currentBuild.result} \
                --clang-format-patch "${RESULT_DIR}/clang-format.patch" \
                --clang-tidy-result "${RESULT_DIR}/clang-tidy.txt" \
                --clang-tidy-ignore "${SCRIPT_DIR}/clang-tidy-comments.ignore" \
                --results-dir "${TARGET_DIR}" \
                --results-url "${RESULT_URL}" \
                --failures "${failure_message}" \
                --name "linux"
                """
        }
    }    
}
