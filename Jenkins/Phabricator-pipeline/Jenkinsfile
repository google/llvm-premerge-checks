// Copyright 2019 Google LLC
//
// Licensed under the the Apache License v2.0 with LLVM Exceptions (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://llvm.org/LICENSE.txt
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

pipeline {
    agent any
    parameters {
        string(name: 'DIFF_ID')
        string(name: 'PHID')
    }
    environment {
            CONDUIT_TOKEN = credentials('phabricator-conduit-token')
            PHABRICATOR_HOST = 'https://reviews.llvm.org'
            PHAB_LOG = "${WORKSPACE}/build/.phabricator-comment"
            SCRIPT_DIR = "${WORKSPACE}/llvm-premerge-checks/scripts"
            RESULT_URL = "http://results.llvm-merge-guard.org/${JOB_BASE_NAME}-${BUILD_NUMBER}"
            TEST_REPORT = "${WORKSPACE}/build/test-results.xml"
    }
    stages {
        stage("build info"){
            steps {
                echo "Building diff ${DIFF_ID} with PHID ${PHID}"
            }
        }
        stage("git checkout"){
            steps {
                git url: 'https://github.com/llvm/llvm-project.git'
                sh 'git clean -fdx'
                sh 'mkdir -p llvm-premerge-checks'
                dir("llvm-premerge-checks")
                {
                    git url: 'https://github.com/google/llvm-premerge-checks.git'
                }
            }            
        }
        stage('arc patch') {
            steps {
                sh "python3 ${SCRIPT_DIR}/phabtalk/apply_patch.py"
            }
        }
       stage('CMake') {
            steps {
                sh "${SCRIPT_DIR}/run_cmake.sh"
            }
        }
        stage('ninja all') {
            steps {
                sh "${SCRIPT_DIR}/run_ninja.sh all"
            }
        }
        stage('ninja check') {
            steps {
                sh "${SCRIPT_DIR}/run_ninja.sh check"
            }
        }
        stage('ninja check-all') {
            steps {
                sh "${SCRIPT_DIR}/run_ninja.sh check-all"
            }
        }
    }
    post { 
        always { 
            echo "Console log is available at ${RESULT_URL}"
            dir("${env.TARGET_DIR}") {
                // copy console log to result folder
                sh "wget -qO console-log.txt http://jenkins-ui.jenkins.svc.cluster.local:8080/job/${JOB_BASE_NAME}/${BUILD_NUMBER}/consoleText"
            }
            /// send results to Phabricator
            sh '''
set +x
cat <<-EOF> ${PHAB_LOG}
Log files: [[${RESULT_URL}/console-log.txt | console-log.txt]], [[${RESULT_URL}/CMakeCache.txt | CMakeCache.txt]]
EOF
'''
            sh '''${SCRIPT_DIR}/phabtalk/phabtalk.py "${PHID}" "${DIFF_ID}" \
                --conduit-token "${CONDUIT_TOKEN}" \
                --test-result-file "${TEST_REPORT}" \
                --comment-file "${PHAB_LOG}" \
                --host "${PHABRICATOR_HOST}/api/"
                '''
        }
    }    
}